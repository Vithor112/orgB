--------------------------MONOCICLO---------------------------------------------

JR

Modificações para adicionar a instrução JR ao monociclo:
- Adiciona-se uma nova flag de saída da ALU, chamada ALU Branch;
- Adiciona-se um MUX na entrada do PC que seleciona entre o fio pré-existente
(sel=0), e a saída da ALU (sel=1), sendo o selecionador a flag ALU Branch;
- Modifica-se a ALU para adicionar um novo modo (100), nesse modo a ALU ativa a
ALU Branch e passa rs para a saída;
- O que impede de utilizar o modo de ADD existente já na ALU é o fato de ser
necessário sinalizar que o PC deve receber a saída da ALU, se não poderíamos
reutiliza-lo pois o outro registrador obrigatoriamente será 0;
- Também não é um problema o fato de escrevermos RS no banco de registradores,
pois o registrador destino é o registrador 0, que é read only;
- Modifica-se o ALU Control para retornar 100 quando OP = 10 e FUNC = 001000

######################################################################

ADDI

A instrução ADDI é muito semelhante com a ADD, já implementada, então para que ela funcionasse foi necessário modificar somente a ROM do bloco de controle, para que alguns sinais de controle fossem alterados, sendo que ficaram assim:

RegDst = 0, para salvar no RT (diferente de ADD)
Jump = 0
Branch = 0
MemRead = 0
MemToReg= 0, para passar o dado da ULA para o banco de registradores
ALUop = 00, para não selecionar funct e selecionar ADD no control (diferente de ADD)
MemWrite = 0
ALUSrc = 1, para usar o imediato na soma (diferente de ADD)
RegWrite = 1, para escrever nos registradores

######################################################################

BLTZ

Para a implementação da instrução BLTZ (Branch on Less Than Zero), foi necessária a adição de um novo bit (sinal)  na unidade de controle, denominado REGIMM, que é ligado apenas quando essa instrução está em execução. 

Além disso, foi feita uma modificação na entrada do MUX responsável pelo cálculo do endereço em instruções de desvio. Antes, a entrada do MUX era definida pela saída de apenas um AND, entre o bit de controle de Branch e o bit proveniente da ULA. Agora, foi adicionado um novo AND, exclusivamente para os casos da instrução BLTZ. Esse AND terá como entradas dois túneis, um indicando que a instrução é BLTZ (que sempre estará ligado quando ela estiver executando) , e outro indicando se o conteúdo do registrador rs é negativo. Se for negativo, então a saída do AND sinaliza o pulo. Unindo esses AND’S, foi implementado um OR, que irá se conectar ao MUX, o que indica que o pulo pode ser feito tanto se a instrução for BLTZ quanto se for um outro tipo de branch (como o BEQ)


 O sinal tem como funções:

Selecionar o bit mais significativo do registrador, que irá dizer se o valor contido nele é positivo ou negativo. Isso definirá se o branch do BLTZ deve ou não ocorrer
“Setar”  o túnel que indica se o regist. contém valor negativo, se o valor for negativo
Sinalizar no MUX que calcula o próximo endereço que a instrução é BLTZ
Sinalizar no MUX que calcula o próximo endereço se o valor é positivo ou negativo


######################################################################

SRA


--------------------------MULTICICLO---------------------------------------------

JR

Modificações para adicionar a instrução JR ao monociclo:
- Adiciona-se uma nova flag de saída da ALU, chamada ALU Branch;
- Modifica-se a ALU para adicionar um novo modo (100), nesse modo a ALU ativa a
ALU Branch e passa rs para a saída;
- O que impede de utilizar o modo de ADD existente já na ALU é o fato de ser
necessário sinalizar que o PC deve receber a saída da ALU, se não poderíamos
reutiliza-lo pois o outro registrador obrigatoriamente será 0;
- Também não é um problema o fato de escrevermos RS no banco de registradores,
pois o registrador destino é o registrador 0, que é read only;
- Modifica-se o ALU Control para retornar 100 quando OP = 10 e FUNC = 001000
- Modifica-se o controle para que no estado de execução de instruções do tipo R o PcSource seja igual a 00 e adiciona-se uma nova flag chamada ExecR que é ativada somente no estado de execução de instruções do tipo R;
- Adiciona-se mais uma entrada no OR do enable do PC, que consiste de um AND entre a flag AluBranch e a flag execR 

######################################################################

ADDI

Novamente precisamos alterar somente os sinais de controle, nesse caso ilustrados no diagrama da FSM. A execução ocorre progredindo do estado 0, para o 1, 2, 7 e 0 novamente.    


######################################################################

BLTZ

Para implementar essa instrução, foi criado um bit de sinal "BranchNeg". Será feito um AND entre esse bit, que será ligado quando a instrução estiver em execução, e o bit mais significativo do registrador RS, que conterá o sinal do valor resultante da subtração que decidirá o branch. Se for negativo, então o branch será realizado. Os 2 primeiros ciclos da instrução coincidem com as demais, sendo que a partir do terceiro ciclo o bit novo é acionado e a lógica descrita acima ocorrerá.


######################################################################

SRA

--------------------------PIPELINE---------------------------------------------

JR

######################################################################

ADDI

A configuração de sinais utilizados são os mesmos do MIPS Monociclo: 
RegDst = 0, para salvar no RT (diferente de ADD)
Jump = 0
Branch = 0
MemRead = 0
MemToReg= 0, para passar o dado da ULA para o banco de registradores
ALUop = 00, para não selecionar funct e selecionar ADD no control (diferente de ADD)
MemWrite = 0
ALUSrc = 1, para usar o imediato na soma (diferente de ADD)
RegWrite = 1, para escrever nos registradores

######################################################################

BLTZ

######################################################################

SRA


